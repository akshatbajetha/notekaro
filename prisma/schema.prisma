// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  Notes     Note[]
  TodoLists TodoList[]
  Sections  Section[]
  Todos     Todo[]
  Sketch    Sketch[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Note {
  id        String   @id @default(uuid())
  userId    String
  title     String   @default("Untitled")
  content   String // BlockNote.js content as JSON
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model TodoList {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  todos     Todo[]
  sections  Section[]

  user User @relation(fields: [userId], references: [id])
}

model Section {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  todos     Todo[]

  todoList   TodoList @relation(fields: [todoListId], references: [id])
  todoListId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model Todo {
  id         String    @id @default(cuid())
  title      String
  completed  Boolean   @default(false)
  priority   Int       @default(4) // 1 = High, 4 = None
  todoList   TodoList? @relation(fields: [todoListId], references: [id])
  todoListId String?
  section    Section?  @relation(fields: [sectionId], references: [id])
  sectionId  String?
  dueDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     String
}

model Sketch {
  id         String    @id @default(cuid())
  title      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  scale      Int       @default(1)
  panOffsetX Float     @default(0)
  panOffsetY Float     @default(0)
  elements   Element[]
  user       User      @relation(fields: [userId], references: [id])
  userId     String
}

model Element {
  id       String  @id @default(cuid())
  type     String
  x        Float
  y        Float
  width    Float?
  height   Float?
  text     String?
  points   Json?
  color    String?
  stroke   String?
  fill     String?
  sketch   Sketch  @relation(fields: [sketchId], references: [id], onDelete: Cascade)
  sketchId String
}
