generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  createdAt     DateTime   @default(now())
  emailVerified DateTime?
  image         String?
  name          String?
  updatedAt     DateTime   @default(now()) @updatedAt
  accounts      Account[]
  elements      Element[]
  Notes         Note[]
  Sections      Section[]
  sessions      Session[]
  Todos         Todo[]
  TodoLists     TodoList[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  scope             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  access_token      String?
  expires_at        Int?
  id_token          String?
  refresh_token     String?
  session_state     String?
  token_type        String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Note {
  id        String   @id @default(uuid())
  userId    String
  title     String   @default("Untitled")
  content   String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model TodoList {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  sections  Section[]
  todos     Todo[]
  user      User      @relation(fields: [userId], references: [id])
}

model Section {
  id         String   @id @default(cuid())
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  todoListId String
  userId     String
  todoList   TodoList @relation(fields: [todoListId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  todos      Todo[]
}

model Todo {
  id         String    @id @default(cuid())
  title      String
  completed  Boolean   @default(false)
  priority   Int       @default(4)
  todoListId String?
  sectionId  String?
  dueDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  section    Section?  @relation(fields: [sectionId], references: [id])
  todoList   TodoList? @relation(fields: [todoListId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Element {
  id          String      @id
  type        ElementType
  x1          Float
  y1          Float
  x2          Float?
  y2          Float?
  text        String?
  points      Json?
  strokeWidth Int
  stroke      String
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
}

enum ElementType {
  PENCIL
  TEXT
  LINE
  RECT
  CIRCLE
  DIAMOND
  ARROW
}
